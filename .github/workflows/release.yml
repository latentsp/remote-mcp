name: Release Go Binary

on:
  push:
    branches:
      - 'main'    # Trigger on push to main branch
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build-release:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64] # Added arm64 support

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Initialize Go module
        run: |
          go mod tidy
          go mod download

      - name: Set output binary name
        id: vars
        run: |
          binary_name="remote-mcp"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            echo "binary_path=./${binary_name}.exe" >> $GITHUB_OUTPUT
          else
            echo "binary_path=./${binary_name}" >> $GITHUB_OUTPUT
          fi
          echo "asset_name=${binary_name}-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_OUTPUT
          if [ "${{ matrix.goos }}" == "windows" ]; then
            echo "asset_name=${binary_name}-${{ matrix.goos }}-${{ matrix.goarch }}.exe" >> $GITHUB_OUTPUT
          fi

      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -v -ldflags="-s -w" -o ${{ steps.vars.outputs.binary_path }} ./...

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.asset_name }}
          path: ${{ steps.vars.outputs.binary_path }}

  create-release:
    name: Create GitHub Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v0.0.0-dev-${GITHUB_SHA::7}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Copy installation scripts
        run: |
          cp scripts/install.sh artifacts/
          cp scripts/install.ps1 artifacts/

      - name: Move binaries to root of artifacts
        run: |
          for dir in artifacts/remote-mcp-*; do
            if [ -d "$dir" ]; then
              target_name=$(basename "$dir")

              if [ -f "$dir/remote-mcp" ]; then
                mv "$dir/remote-mcp" "artifacts/$target_name-bin"
              elif [ -f "$dir/remote-mcp.exe" ]; then
                mv "$dir/remote-mcp.exe" "artifacts/$target_name-bin.exe"
              fi

              rm -r "$dir"

              if [ -f "artifacts/$target_name-bin" ]; then
                mv "artifacts/$target_name-bin" "artifacts/$target_name"
              elif [ -f "artifacts/$target_name-bin.exe" ]; then
                mv "artifacts/$target_name-bin.exe" "artifacts/$target_name.exe"
              fi
            fi
          done

      - name: List downloaded artifacts
        run: ls -R artifacts/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Release ${{ steps.get_version.outputs.version }}

            ## Installation

            ### Unix-like systems (Linux, macOS)
            ```bash
            curl -s https://raw.githubusercontent.com/latentsp/remote-mcp/${{ steps.get_version.outputs.version }}/scripts/install.sh | bash
            ```

            ### Windows (PowerShell)
            ```powershell
            Invoke-WebRequest -Uri https://raw.githubusercontent.com/latentsp/remote-mcp/${{ steps.get_version.outputs.version }}/scripts/install.ps1 -OutFile install.ps1; .\install.ps1
            ```
          draft: false
          prerelease: false
          files: |
            artifacts/remote-mcp-*
            artifacts/install.sh
            artifacts/install.ps1